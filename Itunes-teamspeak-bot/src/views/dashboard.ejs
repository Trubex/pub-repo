<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - iTunes TeamSpeak Bot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            min-height: 100vh;
        }

        .navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .navbar h1 {
            font-size: 24px;
        }

        .navbar-right {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .navbar a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .navbar a:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }

        .status-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .status-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .status-card h3 {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
            text-transform: uppercase;
        }

        .status-card .value {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-indicator.online {
            background: #4caf50;
        }

        .status-indicator.offline {
            background: #f44336;
        }

        .player-card {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .player-card h2 {
            margin-bottom: 20px;
            color: #333;
        }

        .track-info {
            background: #f5f7fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .track-info .track-title {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }

        .track-info .track-artist {
            font-size: 16px;
            color: #666;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
        }

        .btn-secondary {
            background: #e0e0e0;
            color: #333;
        }

        .btn-secondary:hover {
            background: #d0d0d0;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
        }

        .volume-slider {
            flex: 1;
            height: 6px;
            border-radius: 3px;
            background: #e0e0e0;
            outline: none;
            -webkit-appearance: none;
        }

        .volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #667eea;
            cursor: pointer;
        }

        .volume-value {
            min-width: 50px;
            text-align: right;
            font-weight: bold;
            color: #667eea;
        }

        .search-box {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .search-box h2 {
            margin-bottom: 20px;
            color: #333;
        }

        .search-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .search-results {
            margin-top: 20px;
        }

        .search-result-item {
            padding: 15px;
            background: #f5f7fa;
            margin-bottom: 10px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .search-result-item:hover {
            background: #e8ebf0;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            background: #4caf50;
            color: white;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: none;
            z-index: 1000;
        }

        .notification.error {
            background: #f44336;
        }

        .notification.show {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
            }
            to {
                transform: translateX(0);
            }
        }
    </style>
</head>
<body>
    <div class="navbar">
        <h1>üéµ iTunes TeamSpeak Bot</h1>
        <div class="navbar-right">
            <span>Welcome, <%= username %></span>
            <a href="/history">History</a>
            <a href="/logs">Logs</a>
            <a href="/logout">Logout</a>
        </div>
    </div>

    <div class="container">
        <div class="status-cards">
            <div class="status-card">
                <h3>TeamSpeak Status</h3>
                <div class="value">
                    <span class="status-indicator <%= tsStatus.connected ? 'online' : 'offline' %>"></span>
                    <%= tsStatus.connected ? 'Connected' : 'Disconnected' %>
                </div>
            </div>
            <div class="status-card">
                <h3>iTunes Status</h3>
                <div class="value">
                    <span class="status-indicator <%= itunesConnected ? 'online' : 'offline' %>"></span>
                    <%= itunesConnected ? 'Connected' : 'Disconnected' %>
                </div>
            </div>
            <div class="status-card">
                <h3>Server</h3>
                <div class="value" style="font-size: 16px;"><%= tsStatus.serverName %></div>
            </div>
        </div>

        <div class="player-card">
            <h2>Player Controls</h2>

            <div class="track-info">
                <div class="track-title" id="trackTitle">
                    <%= currentTrack && currentTrack.name ? currentTrack.name : 'No track playing' %>
                </div>
                <div class="track-artist" id="trackArtist">
                    <%= currentTrack && currentTrack.artist ? currentTrack.artist : '' %>
                </div>
            </div>

            <div class="controls">
                <button class="btn btn-primary" onclick="playTrack()">‚ñ∂ Play</button>
                <button class="btn btn-secondary" onclick="pauseTrack()">‚è∏ Pause</button>
                <button class="btn btn-secondary" onclick="stopTrack()">‚èπ Stop</button>
                <button class="btn btn-secondary" onclick="skipTrack()">‚è≠ Skip</button>
                <button class="btn btn-secondary" onclick="previousTrack()">‚èÆ Previous</button>
                <button class="btn btn-primary" onclick="refreshStatus()">üîÑ Refresh</button>
            </div>

            <div class="volume-control">
                <span>üîä Volume:</span>
                <input type="range" class="volume-slider" id="volumeSlider" min="0" max="100" value="<%= volume %>" onchange="setVolume(this.value)">
                <span class="volume-value" id="volumeValue"><%= volume %>%</span>
            </div>
        </div>

        <div class="search-box">
            <h2>Search & Play</h2>
            <input type="text" class="search-input" id="searchQuery" placeholder="Search for a song, artist, or album..." onkeypress="handleSearchKeypress(event)">
            <button class="btn btn-primary" onclick="searchTracks()">üîç Search</button>
            <button class="btn btn-secondary" onclick="playSearch()">‚ñ∂ Play Now</button>

            <div class="search-results" id="searchResults"></div>
        </div>

        <div class="player-card" style="margin-top: 30px;">
            <h2>TeamSpeak Controls</h2>

            <div class="controls" style="margin-bottom: 20px;">
                <button class="btn btn-primary" onclick="reconnectTeamSpeak()">üîÑ Reconnect</button>
                <button class="btn btn-secondary" onclick="disconnectTeamSpeak()">‚ùå Disconnect</button>
                <button class="btn btn-secondary" onclick="loadChannels()">üìã Load Channels</button>
            </div>

            <div style="margin-bottom: 15px;">
                <strong>Current Channel:</strong> <span id="currentChannel">Loading...</span>
            </div>

            <div>
                <label for="channelSelect" style="display: block; margin-bottom: 8px; font-weight: 600;">Join Channel:</label>
                <select id="channelSelect" class="search-input" style="margin-bottom: 10px;">
                    <option value="">-- Select a channel --</option>
                </select>
                <button class="btn btn-primary" onclick="joinSelectedChannel()">Join Channel</button>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        function showNotification(message, isError = false) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification show' + (isError ? ' error' : '');
            setTimeout(() => {
                notification.className = 'notification';
            }, 3000);
        }

        async function playTrack() {
            try {
                const response = await fetch('/api/play', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Playing');
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function pauseTrack() {
            try {
                const response = await fetch('/api/pause', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Paused');
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function stopTrack() {
            try {
                const response = await fetch('/api/stop', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Stopped');
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function skipTrack() {
            try {
                const response = await fetch('/api/skip', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Skipped');
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function previousTrack() {
            try {
                const response = await fetch('/api/previous', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Previous track');
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function setVolume(volume) {
            try {
                const response = await fetch('/api/volume', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ volume: parseInt(volume) })
                });
                const data = await response.json();
                if (data.success) {
                    document.getElementById('volumeValue').textContent = volume + '%';
                    showNotification('Volume set to ' + volume + '%');
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function refreshStatus() {
            try {
                const response = await fetch('/api/current');
                const data = await response.json();
                if (data.success && data.track) {
                    document.getElementById('trackTitle').textContent = data.track.name || 'No track playing';
                    document.getElementById('trackArtist').textContent = data.track.artist || '';
                    document.getElementById('volumeSlider').value = data.volume;
                    document.getElementById('volumeValue').textContent = data.volume + '%';
                }
            } catch (error) {
                console.error('Refresh error:', error);
            }
        }

        async function searchTracks() {
            const query = document.getElementById('searchQuery').value.trim();
            if (!query) {
                showNotification('Please enter a search query', true);
                return;
            }

            try {
                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, limit: 10 })
                });
                const data = await response.json();

                if (data.success && data.results.tracks) {
                    displaySearchResults(data.results.tracks);
                } else {
                    showNotification('No results found', true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function playSearch() {
            const query = document.getElementById('searchQuery').value.trim();
            if (!query) {
                showNotification('Please enter a search query', true);
                return;
            }

            try {
                const response = await fetch('/api/play', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('Now playing: ' + query);
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        function displaySearchResults(tracks) {
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '<h3 style="margin-bottom: 15px;">Search Results:</h3>';

            tracks.forEach(track => {
                const item = document.createElement('div');
                item.className = 'search-result-item';
                item.innerHTML = `
                    <div>
                        <strong>${track.name}</strong><br>
                        <small>${track.artist || 'Unknown Artist'}</small>
                    </div>
                    <button class="btn btn-primary" onclick="playSpecificTrack('${track.name.replace(/'/g, "\\'")}')">‚ñ∂ Play</button>
                `;
                resultsDiv.appendChild(item);
            });
        }

        async function playSpecificTrack(trackName) {
            try {
                const response = await fetch('/api/play', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: trackName })
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('Now playing: ' + trackName);
                    await refreshStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        function handleSearchKeypress(event) {
            if (event.key === 'Enter') {
                searchTracks();
            }
        }

        // TeamSpeak functions
        async function reconnectTeamSpeak() {
            try {
                showNotification('Reconnecting to TeamSpeak...');
                const response = await fetch('/api/teamspeak/reconnect', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Reconnected to TeamSpeak successfully');
                    await updateTeamSpeakStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function disconnectTeamSpeak() {
            try {
                const response = await fetch('/api/teamspeak/disconnect', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showNotification('Disconnected from TeamSpeak');
                    await updateTeamSpeakStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function loadChannels() {
            try {
                const response = await fetch('/api/teamspeak/channels');
                const data = await response.json();
                if (data.success) {
                    const select = document.getElementById('channelSelect');
                    select.innerHTML = '<option value="">-- Select a channel --</option>';

                    data.channels.forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.name;
                        option.textContent = channel.name;
                        select.appendChild(option);
                    });

                    showNotification('Channels loaded');
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function joinSelectedChannel() {
            const channelName = document.getElementById('channelSelect').value;
            if (!channelName) {
                showNotification('Please select a channel', true);
                return;
            }

            try {
                const response = await fetch('/api/teamspeak/join', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ channelName })
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('Joined channel: ' + channelName);
                    await updateTeamSpeakStatus();
                } else {
                    showNotification('Error: ' + data.error, true);
                }
            } catch (error) {
                showNotification('Error: ' + error.message, true);
            }
        }

        async function updateTeamSpeakStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                if (data.success) {
                    const currentChannel = data.teamspeak.currentChannel || 'Not in a channel';
                    document.getElementById('currentChannel').textContent = currentChannel;
                }
            } catch (error) {
                console.error('Error updating TeamSpeak status:', error);
            }
        }

        // Auto-refresh current track every 10 seconds
        setInterval(refreshStatus, 10000);

        // Load TeamSpeak status on page load
        updateTeamSpeakStatus();
    </script>
</body>
</html>
